import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

# load data
iris = load_iris()
x = iris.data
y = (iris.target == 1).astype(int).reshape(150, 1)  # فقط برای کلاس 0

x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, random_state=4)

x_train = x_train.T
y_train = y_train.T
x_test = x_test.T
y_test = y_test.T

print("x_train shape:", x_train.shape)
print("y_train shape:", y_train.shape)
print("x_test shape:", x_test.shape)
print("y_test shape:", y_test.shape)


def initialize(n_0, n_1):
    w_1 = np.random.randn(n_1, n_0) * 0.01
    b_1 = np.zeros((n_1, 1))
    w_2 = np.random.randn(1, n_1) * 0.01
    b_2 = 0.0
    return w_1, b_1, w_2, b_2


def sigmoid(z):
    return 1 / (1 + np.exp(-z))


def relu(z):
    return np.maximum(0, z)


def relu_derivative(z):
    return (z > 0).astype(float)


def propagate(x, y, w_1, b_1, w_2, b_2):
    m = x.shape[1]

    z1 = np.dot(w_1, x) + b_1
    a1 = relu(z1)
    z2 = np.dot(w_2, a1) + b_2
    a2 = sigmoid(z2)

    cost = (-1 / m) * np.sum(y * np.log(a2 + 1e-8) + (1 - y) * np.log(1 - a2 + 1e-8))

    dz2 = a2 - y
    dw2 = (1 / m) * np.dot(dz2, a1.T)
    db2 = (1 / m) * np.sum(dz2, axis=1, keepdims=True)

    dz1 = np.dot(w_2.T, dz2) * relu_derivative(z1)
    dw1 = (1 / m) * np.dot(dz1, x.T)
    db1 = (1 / m) * np.sum(dz1, axis=1, keepdims=True)

    grads = {"dw_1": dw1, "db_1": db1, "dw_2": dw2, "db_2": db2}

    return cost, grads


def optimize(x, y, w_1, b_1, w_2, b_2, learning_rate, num_iterations, print_cost=False):
    costs = []

    for i in range(num_iterations):
        cost, grads = propagate(x, y, w_1, b_1, w_2, b_2)

        dw_1, db_1, dw_2, db_2 = grads["dw_1"], grads["db_1"], grads["dw_2"], grads["db_2"]

        w_1 -= learning_rate * dw_1
        b_1 -= learning_rate * db_1
        w_2 -= learning_rate * dw_2
        b_2 -= learning_rate * db_2

        if i % 100 == 0:
            costs.append(cost)
            if print_cost:
                print(f"Cost after iteration {i}: {cost:.6f}")

    params = {"w_1": w_1, "b_1": b_1, "w_2": w_2, "b_2": b_2}
    return params, grads, costs


def predict(w_1, b_1, w_2, b_2, x):
    a1 = relu(np.dot(w_1, x) + b_1)
    a2 = sigmoid(np.dot(w_2, a1) + b_2)
    return (a2 > 0.5).astype(int)


def model(x_train, y_train, x_test, y_test, learning_rate=0.005, num_iterations=5000, print_cost=True):
    w_1, b_1, w_2, b_2 = initialize(x_train.shape[0], 16)

    params, grads, costs = optimize(x_train, y_train, w_1, b_1, w_2, b_2,
                                     learning_rate, num_iterations, print_cost)

    w_1, b_1, w_2, b_2 = params["w_1"], params["b_1"], params["w_2"], params["b_2"]

    y_pred_test = predict(w_1, b_1, w_2, b_2, x_test)
    accuracy = 100 - np.mean(np.abs(y_pred_test - y_test)) * 100

    return round(accuracy, 2), params


accuracy, params = model(x_train, y_train, x_test, y_test, learning_rate=0.007,
                          num_iterations=5000, print_cost=True)
print(f"Test set accuracy: {accuracy}%")
